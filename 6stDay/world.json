{
  "robots": [
    {
      "x": 1,
      "y": 1,
      "_orientation": 0,
      "objects": {},
      "_is_leaky": true,
      "_prev_x": 1,
      "_prev_y": 1,
      "_prev_orientation": 0,
      "_trace_history": [],
      "_trace_style": "default",
      "_trace_color": "cyan",
      "__id": 4,
      "model": "light blue",
      "initial_position": [
        1,
        1
      ],
      "possible_initial_positions": [
        [
          1,
          1
        ]
      ]
    }
  ],
  "small_tiles": false,
  "rows": 5,
  "cols": 14,
  "background_image": "worlds/images/stadium.png",
  "walls": {
    "1,1": [
      "east"
    ],
    "3,1": [
      "east"
    ],
    "4,1": [
      "east"
    ],
    "5,1": [
      "east"
    ],
    "9,1": [
      "east"
    ],
    "11,1": [
      "east"
    ]
  },
  "goal": {
    "position": {
      "image": "racing_flag",
      "x": 13,
      "y": 1
    }
  },
  "_CORRECT_PATH": [
    [
      1,
      1
    ],
    [
      1,
      2
    ],
    [
      2,
      2
    ],
    [
      2,
      1
    ],
    [
      3,
      1
    ],
    [
      3,
      2
    ],
    [
      4,
      2
    ],
    [
      4,
      1
    ],
    [
      4,
      2
    ],
    [
      5,
      2
    ],
    [
      5,
      1
    ],
    [
      5,
      2
    ],
    [
      6,
      2
    ],
    [
      6,
      1
    ],
    [
      7,
      1
    ],
    [
      8,
      1
    ],
    [
      9,
      1
    ],
    [
      9,
      2
    ],
    [
      10,
      2
    ],
    [
      10,
      1
    ],
    [
      11,
      1
    ],
    [
      11,
      2
    ],
    [
      12,
      2
    ],
    [
      12,
      1
    ],
    [
      13,
      1
    ]
  ],
  "_CORRECT_PATH_COLOR": "lightgray",
  "tiles": {
    "1,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "1,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "2,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "2,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "3,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "3,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "4,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "4,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "5,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "5,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "6,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "6,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "7,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "8,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "9,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "9,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "10,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "10,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "11,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "11,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "12,2": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "12,1": [
      "rgba(255, 255, 255, 0.3)"
    ],
    "13,1": [
      "rgba(255, 255, 255, 0.3)"
    ]
  },
  "description": [
    "<h1>Hurdles race</h1>",
    "Reeborg has entered a hurdle race. ",
    "Make him run the course, following the path shown.<br><br>",
    "<em>The position and number of hurdles changes each time this world is reloaded.</em>",
    "<h3>What you need to know</h3>",
    "<ul><li>The functions <code>move()</code> and <code>turn_left()</code>.</li>",
    "<li>The conditions <code>front_is_clear()</code> or <code>wall_in_front()</code>,",
    "<code>at_goal()</code>, and their negation.</li>",
    "<li>How to use a <code>while</code> loop and an <code>if</code> statement.</li></ul>",
    "<p>Your program should also be valid for worlds <b>Hurdles 1</b> and <b>Hurdles 2</b>.</p>",
    "DIFFICULTY4",
    "<p>Background image: <a href='https://www.pexels.com/photo/action-athletes-audience-ball-270154/'>www.pexels.com</a></p>"
  ],
  "pre": [
    "RUR.show_path(RUR.public['path'], \"lightgray\");",
    ""
  ],
  "post": [
    "RUR.public.my_check(\"Reeborg did not follow the correct path.\");",
    ""
  ],
  "onload": [
    "var x;",
    "RUR.public['path'] = [[1, 1]]",
    "RUR.set_model('light blue');",
    "RUR._set_trace_color_('cyan');",
    "",
    "// build a random path",
    "for (x=1; x <= 12; x++) {",
    "    if (RUR.randint(1, 2)==1) {",
    "        RUR.add_wall(\"east\", x, 1);",
    "        RUR.public.path.push([x, 2])",
    "        RUR.public.path.push([x+1, 2])",
    "    }",
    "    RUR.public.path.push([x+1, 1])",
    "}",
    "",
    "// We show the desired path very clearly;  in the",
    "// Pre editor, we will set it to be less visible",
    "RUR.show_path(RUR.public['path'], 'black');",
    "",
    "",
    "// We also add semi-transparent tiles over the background",
    "// image to show the desired path. We define a function",
    "// as we will need to redo this once the path is trimmed",
    "RUR.public.show_background = function () {",
    "    for (i=0; i < RUR.public.path.length; i++ ){",
    "        x = RUR.public.path[i][0];",
    "        y = RUR.public.path[i][1];",
    "        RUR.add_colored_tile('rgba(255, 255, 255, 0.3)', x, y);",
    "    }",
    "}",
    "",
    "RUR.public.show_background();",
    "",
    "// Since RUR.public['path'] is defined, setting the following to true ",
    "// and not simply a truthy value, will make the grid show ONLY on",
    "// the path",
    "",
    "RUR.state.visible_grid = RUR.PATH_ONLY;",
    "// The following is going to be called in the Post editor",
    "// we want users to be able to use either Python or Javascript",
    "// to solve this task - so we cannot have Python or Javascript",
    "// specific syntax in either the Pre or the Post editor",
    "RUR.public.my_check = function (failure) {",
    "    if ( RUR.check_path(RUR.public['path']) ) {",
    "        return; // nothing else required.",
    "    }",
    "",
    "    // The program did not work ... let's show all the required",
    "    // feedback in essentially one step",
    "    recording(false); // do not record a new frame for each action",
    "",
    "    //let's make the background picture less visible",
    "    // by covering the entire background with semi-transparent black tiles",
    "    RUR.fill_background('rgba(0, 0, 0, 0.6)');",
    "    // We also show the path again",
    "    RUR.show_path(RUR.public['path'], 'orange');",
    "   ",
    "    // all desired changes done; ready to show them",
    "    recording(true);",
    "",
    "    // finally, we throw an error to end the execution",
    "    // and record the final frame",
    "    throw new RUR.ReeborgError(failure);",
    "}",
    ""
  ]
}